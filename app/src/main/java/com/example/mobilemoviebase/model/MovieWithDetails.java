/*
 * MobileMovieBase
 * This is the MobileMovieBase server.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hargitomi97@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.mobilemoviebase.model;

import com.example.mobilemoviebase.network.OneOfinlineResponse200;
import com.google.gson.annotations.SerializedName;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * MovieWithDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-23T14:07:28.797Z[GMT]")
public class MovieWithDetails implements OneOfinlineResponse200 {
  @SerializedName("Title")
  private String title = null;

  @SerializedName("Year")
  private String year = null;

  @SerializedName("Rated")
  private String rated = null;

  @SerializedName("Released")
  private String released = null;

  @SerializedName("Runtime")
  private String runtime = null;

  @SerializedName("Genre")
  private String genre = null;

  @SerializedName("Director")
  private String director = null;

  @SerializedName("Writer")
  private String writer = null;

  @SerializedName("Actors")
  private String actors = null;

  @SerializedName("Plot")
  private String plot = null;

  @SerializedName("Language")
  private String language = null;

  @SerializedName("Country")
  private String country = null;

  @SerializedName("Awards")
  private String awards = null;

  @SerializedName("Poster")
  private String poster = null;

  @SerializedName("Ratings")
  private List<MovieWithDetailsRatings> ratings = null;

  @SerializedName("Metascore")
  private Integer metascore = null;

  @SerializedName("imdbRating")
  private BigDecimal imdbRating = null;

  @SerializedName("imdbVotes")
  private BigDecimal imdbVotes = null;

  @SerializedName("imdbID")
  private String imdbID = null;

  @SerializedName("Type")
  private String type = null;

  @SerializedName("DVD")
  private String DVD = null;

  @SerializedName("BoxOffice")
  private String boxOffice = null;

  @SerializedName("Production")
  private String production = null;

  @SerializedName("Website")
  private String website = null;

  @SerializedName("Response")
  private Boolean response = null;

  public MovieWithDetails title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public MovieWithDetails year(String year) {
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }

  public MovieWithDetails rated(String rated) {
    this.rated = rated;
    return this;
  }

   /**
   * Get rated
   * @return rated
  **/
  public String getRated() {
    return rated;
  }

  public void setRated(String rated) {
    this.rated = rated;
  }

  public MovieWithDetails released(String released) {
    this.released = released;
    return this;
  }

   /**
   * Get released
   * @return released
  **/
  public String getReleased() {
    return released;
  }

  public void setReleased(String released) {
    this.released = released;
  }

  public MovieWithDetails runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Get runtime
   * @return runtime
  **/
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }

  public MovieWithDetails genre(String genre) {
    this.genre = genre;
    return this;
  }

   /**
   * Get genre
   * @return genre
  **/
  public String getGenre() {
    return genre;
  }

  public void setGenre(String genre) {
    this.genre = genre;
  }

  public MovieWithDetails director(String director) {
    this.director = director;
    return this;
  }

   /**
   * Get director
   * @return director
  **/
  public String getDirector() {
    return director;
  }

  public void setDirector(String director) {
    this.director = director;
  }

  public MovieWithDetails writer(String writer) {
    this.writer = writer;
    return this;
  }

   /**
   * Get writer
   * @return writer
  **/
  public String getWriter() {
    return writer;
  }

  public void setWriter(String writer) {
    this.writer = writer;
  }

  public MovieWithDetails actors(String actors) {
    this.actors = actors;
    return this;
  }

   /**
   * Get actors
   * @return actors
  **/
  public String getActors() {
    return actors;
  }

  public void setActors(String actors) {
    this.actors = actors;
  }

  public MovieWithDetails plot(String plot) {
    this.plot = plot;
    return this;
  }

   /**
   * Get plot
   * @return plot
  **/
  public String getPlot() {
    return plot;
  }

  public void setPlot(String plot) {
    this.plot = plot;
  }

  public MovieWithDetails language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public MovieWithDetails country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public MovieWithDetails awards(String awards) {
    this.awards = awards;
    return this;
  }

   /**
   * Get awards
   * @return awards
  **/
  public String getAwards() {
    return awards;
  }

  public void setAwards(String awards) {
    this.awards = awards;
  }

  public MovieWithDetails poster(String poster) {
    this.poster = poster;
    return this;
  }

   /**
   * Get poster
   * @return poster
  **/
  public String getPoster() {
    return poster;
  }

  public void setPoster(String poster) {
    this.poster = poster;
  }

  public MovieWithDetails ratings(List<MovieWithDetailsRatings> ratings) {
    this.ratings = ratings;
    return this;
  }

  public MovieWithDetails addRatingsItem(MovieWithDetailsRatings ratingsItem) {
    if (this.ratings == null) {
      this.ratings = new ArrayList<MovieWithDetailsRatings>();
    }
    this.ratings.add(ratingsItem);
    return this;
  }

   /**
   * Get ratings
   * @return ratings
  **/
  public List<MovieWithDetailsRatings> getRatings() {
    return ratings;
  }

  public void setRatings(List<MovieWithDetailsRatings> ratings) {
    this.ratings = ratings;
  }

  public MovieWithDetails metascore(Integer metascore) {
    this.metascore = metascore;
    return this;
  }

   /**
   * Get metascore
   * @return metascore
  **/
  public Integer getMetascore() {
    return metascore;
  }

  public void setMetascore(Integer metascore) {
    this.metascore = metascore;
  }

  public MovieWithDetails imdbRating(BigDecimal imdbRating) {
    this.imdbRating = imdbRating;
    return this;
  }

   /**
   * Get imdbRating
   * @return imdbRating
  **/
  public BigDecimal getImdbRating() {
    return imdbRating;
  }

  public void setImdbRating(BigDecimal imdbRating) {
    this.imdbRating = imdbRating;
  }

  public MovieWithDetails imdbVotes(BigDecimal imdbVotes) {
    this.imdbVotes = imdbVotes;
    return this;
  }

   /**
   * Get imdbVotes
   * @return imdbVotes
  **/
  public BigDecimal getImdbVotes() {
    return imdbVotes;
  }

  public void setImdbVotes(BigDecimal imdbVotes) {
    this.imdbVotes = imdbVotes;
  }

  public MovieWithDetails imdbID(String imdbID) {
    this.imdbID = imdbID;
    return this;
  }

   /**
   * Get imdbID
   * @return imdbID
  **/
  public String getImdbID() {
    return imdbID;
  }

  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }

  public MovieWithDetails type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public MovieWithDetails DVD(String DVD) {
    this.DVD = DVD;
    return this;
  }

   /**
   * Get DVD
   * @return DVD
  **/
  public String getDVD() {
    return DVD;
  }

  public void setDVD(String DVD) {
    this.DVD = DVD;
  }

  public MovieWithDetails boxOffice(String boxOffice) {
    this.boxOffice = boxOffice;
    return this;
  }

   /**
   * Get boxOffice
   * @return boxOffice
  **/
  public String getBoxOffice() {
    return boxOffice;
  }

  public void setBoxOffice(String boxOffice) {
    this.boxOffice = boxOffice;
  }

  public MovieWithDetails production(String production) {
    this.production = production;
    return this;
  }

   /**
   * Get production
   * @return production
  **/
  public String getProduction() {
    return production;
  }

  public void setProduction(String production) {
    this.production = production;
  }

  public MovieWithDetails website(String website) {
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }

  public MovieWithDetails response(Boolean response) {
    this.response = response;
    return this;
  }

   /**
   * Get response
   * @return response
  **/
  public Boolean isResponse() {
    return response;
  }

  public void setResponse(Boolean response) {
    this.response = response;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MovieWithDetails movieWithDetails = (MovieWithDetails) o;
    return Objects.equals(this.title, movieWithDetails.title) &&
        Objects.equals(this.year, movieWithDetails.year) &&
        Objects.equals(this.rated, movieWithDetails.rated) &&
        Objects.equals(this.released, movieWithDetails.released) &&
        Objects.equals(this.runtime, movieWithDetails.runtime) &&
        Objects.equals(this.genre, movieWithDetails.genre) &&
        Objects.equals(this.director, movieWithDetails.director) &&
        Objects.equals(this.writer, movieWithDetails.writer) &&
        Objects.equals(this.actors, movieWithDetails.actors) &&
        Objects.equals(this.plot, movieWithDetails.plot) &&
        Objects.equals(this.language, movieWithDetails.language) &&
        Objects.equals(this.country, movieWithDetails.country) &&
        Objects.equals(this.awards, movieWithDetails.awards) &&
        Objects.equals(this.poster, movieWithDetails.poster) &&
        Objects.equals(this.ratings, movieWithDetails.ratings) &&
        Objects.equals(this.metascore, movieWithDetails.metascore) &&
        Objects.equals(this.imdbRating, movieWithDetails.imdbRating) &&
        Objects.equals(this.imdbVotes, movieWithDetails.imdbVotes) &&
        Objects.equals(this.imdbID, movieWithDetails.imdbID) &&
        Objects.equals(this.type, movieWithDetails.type) &&
        Objects.equals(this.DVD, movieWithDetails.DVD) &&
        Objects.equals(this.boxOffice, movieWithDetails.boxOffice) &&
        Objects.equals(this.production, movieWithDetails.production) &&
        Objects.equals(this.website, movieWithDetails.website) &&
        Objects.equals(this.response, movieWithDetails.response);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, year, rated, released, runtime, genre, director, writer, actors, plot, language, country, awards, poster, ratings, metascore, imdbRating, imdbVotes, imdbID, type, DVD, boxOffice, production, website, response);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MovieWithDetails {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    rated: ").append(toIndentedString(rated)).append("\n");
    sb.append("    released: ").append(toIndentedString(released)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    director: ").append(toIndentedString(director)).append("\n");
    sb.append("    writer: ").append(toIndentedString(writer)).append("\n");
    sb.append("    actors: ").append(toIndentedString(actors)).append("\n");
    sb.append("    plot: ").append(toIndentedString(plot)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    awards: ").append(toIndentedString(awards)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("    metascore: ").append(toIndentedString(metascore)).append("\n");
    sb.append("    imdbRating: ").append(toIndentedString(imdbRating)).append("\n");
    sb.append("    imdbVotes: ").append(toIndentedString(imdbVotes)).append("\n");
    sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    DVD: ").append(toIndentedString(DVD)).append("\n");
    sb.append("    boxOffice: ").append(toIndentedString(boxOffice)).append("\n");
    sb.append("    production: ").append(toIndentedString(production)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
